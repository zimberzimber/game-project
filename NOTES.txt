
Safari does not support storing blobs in IndexedDB

Pushing spread arrays is faster than concatenating them.

Arrow functions seem to be faster than traditional functions in Firefox.
The opposite is true for Chrome, though the difference is smaller.

Biggest performence impact (so far) comes from array processing for the graphic context

Lighting: Rendered point size cannot exceed certain values (based on GPU? Mine is 1024), which cuts off the light circle past half that limits value.
So I've rewritten the rendered to take in 3 points for a triangle.
Using a triangle because despite having to go through ~30% more pixels, I will only have to pass 3 points without indexing.
This trade off is preferable as processing large arrays has a higher performence impact. (And I'm using a smaller view so its not that big of a difference on the GPUs end)

In TypeScript, a classes default field values are only applied after the parents constructor. Until then they are undefined.

Entire system is prone to memory leaks in form of undisposed references to deleted objects
Could be solved by passing identifiers instead of the entities themselves, and keeping a dictionary which passes methods on to the entities themselves.
But I've decided to not do that as I'm not going to be creating anything else with this project.

7:02am, 31st of July 2020:
The exact moment I learned not to take things for granted, and discovered how painful implementing correct transparency rendering is.
Have to take into account how blending is done, and depth, as it will not render anything behind an area which already had something rendered on to it.
This means that if a semi-transparent area was rendered, everything that should be visible behind it will not exist. (woooo windows to the vooooid)