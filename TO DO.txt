Technical:
X Add FPS counter
X Move models from IDB and Sound managers into the respective folder
X Move IDB schemas to their own folder
X Remove _G
X Add images to IDB
X Rewrite all get/set methods into properties
X Try optimizing any large array operators, namely the one inside 'Draw()' in WebglDef

Systems:
X Separate sound manager to sound managment, and sound playing components
X Add reverb controls to the sound player
- Add pitch controls to the sound player
X Add the option to fade sounds in or out
X Revamp input handler into an independant observable.
- Add mouse controls (canvas + world relative clicks/postions)
- Add camera controls
X Have sound and image manager be initialized by a centralized component
X Add the ability to save settings between sessions
X Add colission tags: A collider has his own tags, and colission tag targets it can collide with

Webgl:
- Modify webgl so you can use multiple images as textures
--- Turn drawData into an array of objects, where the index in the array is the texture ID
--- Webgl initialization will get an array of images, and store it
--- Adding data to draw will push it into the datas image id
--- Calling Draw will clear the canvas, and then iterate over the indexes and draw each textures data separetly, switching to the relevant texture.
X Modify webgl init to accept an array of images instead of just one image
- A way to tell the shader what should and what shouldn't move with the camera view

Game:
- Create a sound emitting component
X Give game a pausing method instead of changing a variable.
- Convert into a state machine, with the following states: Running, Paused, Frozen
--- Paused only pauses the game itself, draw calls are still performed and menu UI is operational
--- Frozen pauses everything, including interactable UIs. Just puts the system on hold